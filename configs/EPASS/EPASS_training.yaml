data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: datasets.EPASS.dataset
        class: DocumentClassification
        DocumentClassification:
          datadirs:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/TemplateMatching/datasets/EPASS/train/'''
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/TemplateMatching/datasets/EPASS/add/'''
          classes:
            EPASS_TYPE_1: 0
            EPASS_TYPE_2: 1
            EPASS_TYPE_3: 2
            EPASS_TYPE_4: 2
            EPASS_TYPE_3_4: 2
            EPASS_TYPE_5: 3
            OTHERS: 4
            OTHERS1: 4
            OTHERS2: 4
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpe''', '''*.JPG''', '''*.PNG''', '''*.JPE''']
          image_size: (224, 224)
          inner_size: 256
          max_transforms: 7
          required_transforms:
            - 'iaa.Grayscale(alpha=[0, 1])'
          optional_transforms:
            - 'iaa.Add(value=(-50, 50), per_channel=True)'
            - 'iaa.AdditiveGaussianNoise(loc=(-5, 5), scale=10, per_channel=True)'
            - 'iaa.Dropout(p=(0, 0.2))'
            - 'iaa.GammaContrast()'
            - 'iaa.JpegCompression(compression=(0, 50))'
            - 'iaa.GaussianBlur(sigma=(0, 2))'
            - 'iaa.MotionBlur()'
            - 'iaa.AddToHueAndSaturation(value=(-50, 50))'
            - 'iaa.PerspectiveTransform(scale=(0, 0.1))'
            - 'iaa.Pad(percent=(0, 0.1))'
            - 'iaa.Crop(percent=(0, 0.2))'
            - 'iaa.Grayscale(alpha=(0, 1))'
            - 'iaa.ChangeColorTemperature()'
            - 'iaa.Clouds()'
      batch_size: 128
      pin_memory: True
      num_workers: 12
      drop_last: False
      shuffle: True

  train_eval:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: datasets.EPASS.dataset
        class: DocumentClassification
        DocumentClassification:
          datadirs:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/TemplateMatching/datasets/EPASS/train/'''
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/TemplateMatching/datasets/EPASS/add/'''
          classes:
            EPASS_TYPE_1: 0
            EPASS_TYPE_2: 1
            EPASS_TYPE_3: 2
            EPASS_TYPE_4: 2
            EPASS_TYPE_3_4: 2
            EPASS_TYPE_5: 3
            OTHERS: 4
            OTHERS1: 4
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpe''', '''*.JPG''', '''*.PNG''', '''*.JPE''']
          image_size: (224, 224)
          inner_size: 256
      batch_size: 128
      pin_memory: True
      num_workers: 12
      drop_last: False
      shuffle: False

  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: datasets.EPASS.dataset
        class: DocumentClassification
        DocumentClassification:
          datadirs:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/TemplateMatching/datasets/EPASS/valid/'''
          classes:
            EPASS_TYPE_1: 0
            EPASS_TYPE_2: 1
            EPASS_TYPE_3: 2
            EPASS_TYPE_4: 2
            EPASS_TYPE_3_4: 2
            EPASS_TYPE_5: 3
            OTHERS: 4
            OTHERS1: 4
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpe''', '''*.JPG''', '''*.PNG''', '''*.JPE''']
          image_size: (224, 224)
          inner_size: 256
      batch_size: 128
      pin_memory: True
      num_workers: 12
      drop_last: False
      shuffle: False


loss:
  module: loss.loss
  class: Loss
  Loss:
    loss_fn:
      module: torch.nn
      class: CrossEntropyLoss
      CrossEntropy:
        weight: "torch.tensor([0.2135751, 0.2318704, 0.1910237, 0.2314835, 0.1320473]).to('cuda')"
    output_transform: 'lambda x: (x[0], x[1])'

model:
  module: model.mobilenets
  class: MobileNetV3Small
  MobileNetV3Small:
    num_classes: 5
    pretrained: True

optim:
  module: torch.optim
  class: SGD
  SGD:
    params: config['model'].parameters()
    lr: 0.001
    momentum: 0.92

# optimizer:
#   module: torch.optim
#   class: Adam
#   Adam:
#     params: config['model'].parameters()
#     lr: 0.001
#     amsgrad: True

early_stopping:
  module: handler.early_stopping
  class: EarlyStopping
  EarlyStopping:
    evaluator_name: '''valid'''
    patience: 7
    delta: 0
    mode: '''min'''
    score_name: '''loss'''
    
metric:
  module: metric.metric_base
  class: Metrics
  Metrics:
    metrics:
      accuracy:
        module: metric.metric_funcs
        class: Accuracy
        Accuracy:
          output_transform: 'lambda x: (x[0].softmax(dim=1), x[1])'
      loss:
        module: metric.loss
        class: Loss
        Loss:
          loss_fn:
            module: torch.nn
            class: CrossEntropyLoss
          output_transform: 'lambda x: (x[0], x[1])'

writer:
  module: handler.writer
  class: Writer
  Writer:
    save_dir: '''checkpoint/EPASS/'''

logger:
  module: handler.logger
  class: Logger
  Logger:
    save_dir: '''checkpoint/EPASS/'''
    mode: logging.DEBUG
    format: '''%(asctime)s - %(name)s - %(levelname)s - %(message)s'''

plot:
  module: handler.plot
  class: Plot
  Plot:
    save_dir: '''checkpoint/EPASS/'''

lr_scheduler:
  module: torch.optim.lr_scheduler
  class: ReduceLROnPlateau
  ReduceLROnPlateau:
    optimizer: config['optim']
    mode: '''min'''
    factor: 0.1
    patience: 5
    verbose: True

model_info:
  module: trainer.utils
  class: ModelInfo
  ModelInfo:
    verbose: True
    input_shape: '(224, 224, 3)'

trainer:
  module: trainer.trainer
  class: Trainer
  Trainer:
    model: config['model']
    data: config['data']
    loss: config['loss']
    optim: config['optim']
    metric: config['metric']
    early_stopping: config['early_stopping']
    lr_scheduler: config['lr_scheduler']
    logger: config['logger']
    writer: config['writer']
    plot: config['plot']
    model_info: config['model_info']
    save_dir: '''checkpoint/EPASS/'''

extralibs:
  torch: torch
  iaa: imgaug.augmenters
  logging: logging
  torchvision: torchvision
  transforms: torchvision.transforms